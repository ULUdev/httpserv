#ifndef __HTTPSERV_HTTP_STATUS_H__
#define __HTTPSERV_HTTP_STATUS_H__
/*
 * Type used internally to represent statuses
 */
typedef enum {
  // 1XX
  HTTPSERV_HTTP_STATUS_CONTINUE = 100,
  HTTPSERV_HTTP_STATUS_SWITCHING_PROTOCOLS = 101,
  
  // 2XX
  HTTPSERV_HTTP_STATUS_OK = 200,
  HTTPSERV_HTTP_STATUS_CREATED = 201,
  HTTPSERV_HTTP_STATUS_ACCEPTED = 202,
  HTTPSERV_HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION = 203,
  HTTPSERV_HTTP_STATUS_NO_CONTENT = 204,
  HTTPSERV_HTTP_STATUS_RESET_CONTENT = 205,
  HTTPSERV_HTTP_STATUS_PARTIAL_CONTENT = 206,
  
  // 3XX
  HTTPSERV_HTTP_STATUS_MULTIPLE_CHOICES = 300,
  HTTPSERV_HTTP_STATUS_MOVED_PERMANENTLY = 301,
  HTTPSERV_HTTP_STATUS_FOUND = 302,
  HTTPSERV_HTTP_STATUS_SEE_OTHER = 303,
  HTTPSERV_HTTP_STATUS_NOT_MODIFIED = 304,
  HTTPSERV_HTTP_STATUS_TEMPORARY_REDIRECT = 307,
  HTTPSERV_HTTP_STATUS_PERMANENT_REDIRECT = 308,
  
  // 4XX
  HTTPSERV_HTTP_STATUS_BAD_REQUEST = 400,
  HTTPSERV_HTTP_STATUS_UNAUTHORIZED = 401,
  HTTPSERV_HTTP_STATUS_FORBIDDEN = 403,
  HTTPSERV_HTTP_STATUS_NOT_FOUND = 404,
  HTTPSERV_HTTP_STATUS_METHOD_NOT_ALLOWED = 405,
  HTTPSERV_HTTP_STATUS_NOT_ACCEPTABLE = 406,
  HTTPSERV_HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED = 407,
  HTTPSERV_HTTP_STATUS_REQUEST_TIMEOUT = 408,
  HTTPSERV_HTTP_STATUS_CONFLICT = 409,
  HTTPSERV_HTTP_STATUS_GONE = 410,
  HTTPSERV_HTTP_STATUS_LENGHT_REQUIRED = 411,
  HTTPSERV_HTTP_STATUS_PRECONDITION_FAILED = 412,
  HTTPSERV_HTTP_STATUS_PAYLOAD_TOO_LARGE = 413,
  HTTPSERV_HTTP_STATUS_URI_TOO_LONG = 414,
  HTTPSERV_HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE = 415,
  HTTPSERV_HTTP_STATUS_RANGE_NOT_SATISFIABLE = 416,
  HTTPSERV_HTTP_STATUS_EXPECTATION_FAILED = 417,
  HTTPSERV_HTTP_STATUS_IM_A_TEAPOT = 418,
  HTTPSERV_HTTP_STATUS_UPGRADE_REQUIRED = 426,
  HTTPSERV_HTTP_STATUS_PRECONDITION_REQUIRED = 428,
  HTTPSERV_HTTP_STATUS_TOO_MANY_REQUESTS = 429,
  HTTPSERV_HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
  HTTPSERV_HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS = 451,
  
  // 5XX
  HTTPSERV_HTTP_STATUS_INTERNAL_SERVER_ERROR = 500,
  HTTPSERV_HTTP_STATUS_NOT_IMPLEMENTED = 501,
  HTTPSERV_HTTP_STATUS_BAD_GATEWAY = 502,
  HTTPSERV_HTTP_STATUS_SERVICE_UNAVAILABLE = 503,
  HTTPSERV_HTTP_STATUS_GATEWAY_TIMEOUT = 504,
  HTTPSERV_HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED = 505,
  HTTPSERV_HTTP_STATUS_VARIANT_ALSO_NEGOTIATES = 506,
  HTTPSERV_HTTP_STATUS_NOT_EXTENDED = 510,
  HTTPSERV_HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED = 511,

} httpserv_http_status_t;
/*
 * This function returns the string put into responses after the status code. If
 * the status code supplied was invalid it returns NULL
 */
char *httpserv_http_strstatus(const httpserv_http_status_t status);
/*
 * This function checks wether or not status is a valid, supported status
 */
int httpserv_http_status_valid(const httpserv_http_status_t status);
#endif
